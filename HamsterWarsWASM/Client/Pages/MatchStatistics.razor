@page "/statistics"
@inject IHamsterService HamsterService


@if (HamsterService.Hamsters == null || HamsterService.Hamsters.Count == 0)
{
    <span>Loading hamsters..</span>
}
else
{
    <ListHamsterComponent Hamsters="Top5Hamsters" Context="hamster">
        <TableHeader>
            <th>Hamster Id</th>
            <th>Name</th>
            <th>Wins</th>
        </TableHeader>
        <RowTemplate>
            <td>@hamster.Id</td>
            <td>@hamster.Name</td>
            <td>@hamster.Wins</td>
        </RowTemplate>
    </ListHamsterComponent>

    <ListHamsterComponent Hamsters="Bottom5Hamsters" Context="hamster">
        <TableHeader>
            <th>Hamster Id</th>
            <th>Name</th>
            <th>Defats</th>
        </TableHeader>
        <RowTemplate>
            <td>@hamster.Id</td>
            <td>@hamster.Name</td>
            <td>@hamster.Defeats</td>
        </RowTemplate>
    </ListHamsterComponent>

}
@code {

    private List<Hamster> Top5Hamsters = new List<Hamster>();
    private List<Hamster> Bottom5Hamsters = new List<Hamster>();

    protected override async Task OnInitializedAsync()
    {
        await HamsterService.GetHamsters();
        GetTop5();
        GetBott5();
    }

    List<Hamster> GetTop5()
    {
        var list = HamsterService.Hamsters;
        Top5Hamsters = list
                        .OrderByDescending(x => x.Wins)
                        .Take(5)
                        .ToList();
        return Top5Hamsters;
    }

    List<Hamster> GetBott5()
    {
        var list = HamsterService.Hamsters;
        Bottom5Hamsters = list
                        .OrderByDescending(x => x.Defeats)
                        .Take(5)
                        .ToList();
        return Bottom5Hamsters;
    }
}
