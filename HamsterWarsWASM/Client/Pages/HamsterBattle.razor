@page "/battle"
@inject IHamsterService HamsterService

<h3>Hamster Battle</h3>


<div class="row">
    @foreach (var hamster in HamsterList)
    {
        <div class="card col-4 d-flex" style="width: 25rem;">
            @*<img class="card-img-top btn" @onclick="@(x => AddWin(hamster1,hamster2))" src="@hamster1.ImgName" alt="Card image cap">*@
            <div class="card-body">
                <h5 class="card-title">@hamster.Name</h5>
                <p class="card-text">
                    Loves: @hamster.Loves
                    <br />
                    Fav Food: @hamster.FavFood
                </p>
            </div>
        </div>
    }
</div>


@code {
    private List<Hamster> HamsterList { get; set; } = new List<Hamster>();
    private static readonly Random rnd = new Random();

    protected override async Task OnInitializedAsync()
    {
        await HamsterService.GetHamsters();
    }

    protected override void OnParametersSet() => ShuffleHamsters();


    public List<Hamster> ShuffleHamsters()
    {
        int n = HamsterService.Hamsters.Count();
        HamsterList = HamsterService.Hamsters;

        // Plockat från Stackoverflow/google --https://blog.codinghorror.com/shuffling/
        while (n > 1)
        {
            int k = (rnd.Next(0, n) % n);
            n--;
            Hamster value = HamsterList[k];
            HamsterList[k] = HamsterList[n];
            HamsterList[n] = value;
        }

        List<Hamster> result = HamsterList
        //.Where(x => x.Deleted == false)
        .Take(2)
        .ToList();

        return result;
    }


}
