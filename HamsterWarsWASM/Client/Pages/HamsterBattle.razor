@page "/battle"
@inject IHamsterService HamsterService
@inject IMatchService MatchService

<h3>@message</h3>

@if (HamsterList.Count == 0)
{
    <WrapperContainerBattleComponent>
        <img src="images/spinninghamster.gif" class="img-loading" />
    </WrapperContainerBattleComponent>
}
else
{
    <WrapperContainerBattleComponent>
        <WrapperContainerBattleComponent>
            @foreach (var hamster in HamsterList)
            {
                <CardBattleComponent Heading="@hamster.Name" Source="@hamster.ImgName">
                    <br />
                    Age: @hamster.Age
                    Loves: @hamster.Loves
                    FavFood: @hamster.FavFood<br />
                    <div class="btn btn-success d-flex text" @onclick="@((e) => WinningHamster(e, @hamster.Id))">Vote</div>
                </CardBattleComponent>
            }
        </WrapperContainerBattleComponent>


        <div class="d-grid gap-2 col-6 mx-auto">
            <div class="btn btn-secondary btn-lg" @onclick="ResetBattle">Generate new battle</div>
            <br />
        </div>

        <WrapperContainerBattleComponent>
            @foreach (var hamster in oldHamsterList)
            {
                <CardAfterBattleComponent Heading="@hamster.Name">
                    <br />
                    <div class="">
                        <p>
                            This hamster has played a total of @hamster.Games games and has a win rate of
                            @GenerateWinLossProcentage(hamster) % with @hamster.Wins wins in total.
                        </p>
                        <p>@hamster.Name has lost @hamster.Defeats games.</p>
                    </div>
                </CardAfterBattleComponent>
            }
        </WrapperContainerBattleComponent>
    </WrapperContainerBattleComponent>
}

@code {

    private static readonly Random rnd = new Random();
    private List<Hamster> HamsterList = new List<Hamster>();
    private List<Hamster> oldHamsterList = new List<Hamster>();
    private Match Match = new Match();
    string message = "Welcome to this ultimate hamster battle.";

    [Parameter]
    public EventCallback<List<Hamster>> ResetList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        message = "Getting hamsters";
        await HamsterService.GetHamsters();
        ShuffleHamsters();
    }

    async void ResetBattle()
    {
        oldHamsterList = HamsterList;
        HamsterList = new List<Hamster>();
        await ResetList.InvokeAsync(ShuffleHamsters());
        StateHasChanged();
    }

    double GenerateWinLossProcentage(Hamster hamster)
    {
        var result = hamster.Games;

        if (result == 0)
        {
            return 0;
        }
        return ((@hamster.Wins * 100) / hamster.Games);
    }

    List<Hamster> ShuffleHamsters()
    {
        int n = HamsterService.Hamsters.Count();
        var list = HamsterService.Hamsters;

        // Plockat från Stackoverflow/google --https://blog.codinghorror.com/shuffling/
        while (n > 1)
        {
            int k = (rnd.Next(0, n) % n);
            n--;
            Hamster value = list[k];
            list[k] = list[n];
            list[n] = value;
        }

        HamsterList = list
                        .Where(x => x.Deleted == false)
                        .Take(2)
                        .ToList();

        return HamsterList;
    }

    protected async void WinningHamster(MouseEventArgs mouseEventArgs, int winningId)
    {
        foreach (var hamster in HamsterList)
        {
            if (hamster.Id == winningId)
            {
                hamster.Wins += 1;
                hamster.Games += 1;
                Match.WinnerId = winningId;
                await HamsterService.UpdateHamster(hamster);
            }
            else
            {
                hamster.Defeats += 1;
                hamster.Games += 1;
                Match.LoserId = hamster.Id;
                await HamsterService.UpdateHamster(hamster);
            }
        }
        await MatchService.CreateMatch(Match);
        Match = new Match();
        oldHamsterList = HamsterList;
        StateHasChanged();
    }
}
