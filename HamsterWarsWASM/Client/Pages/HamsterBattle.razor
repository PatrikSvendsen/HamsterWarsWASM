@page "/battle"
@inject IHamsterService HamsterService
@inject IMatchService MatchService

<h3>Welcome to this ultimate hamster battle.</h3>

@if (HamsterList.Count == 0)
{
    <img src="images/spinninghamster.gif" class="img-loading" />
}
else
{
    <WrapperContainerBattleComponent>
        @foreach (var hamster in HamsterList)
        {
            @*<body>
                <div class="card col-4" style="width: 25rem; height: 23rem">
                <img class="card-img-top btn img-battle" @onclick="@(x => InsertWinnerLosser(@hamster.Id))" src="@hamster.ImgName" alt="Card image cap">
                <div class="card-body">
                <h5 class="card-title">@hamster.Name</h5>
                <br />
                <p>Age: @hamster.Age</p>
                <p>@hamster.Loves</p>
                <p>@hamster.FavFood</p>
                </div>
                </div>*@

            <CardBattleComponent Heading="@hamster.Name" Source="@hamster.ImgName">
                <br />
                Age: @hamster.Age
                Loves: @hamster.Loves
                FavFood: @hamster.FavFood<br />
                <div class="btn btn-success d-flex text" @onclick="@((e) => WinningHamster(e, @hamster.Id))">Vote</div>
            </CardBattleComponent>
        }
    </WrapperContainerBattleComponent>

    <div class="row">
        <div class="col-md-6 col-lg-4">
            <div class="btn btn-primary" @onclick="ResetBattle">Generate new battle</div>
            <br />
        </div>
    </div>

    <WrapperContainerBattleComponent>
        @foreach (var hamster in oldHamsterList)
        {
            @if (oldHamsterList == null)
            {
                <span>No battle played today...</span>
            }

            <CardBattleComponent Heading="@hamster.Name">
                <br />
                <div class="col-lg-3 col-6 text-center">
                    <p>@hamster.Name has a winning procent of @Hamster1Procent.ToString("n2") % </p>
                </div>
            </CardBattleComponent>
        }
    </WrapperContainerBattleComponent>
}

@code {

    private static readonly Random rnd = new Random();
    private List<Hamster> HamsterList = new List<Hamster>();
    private List<Hamster> oldHamsterList = new List<Hamster>();
    private Match Match = new Match();
    string message = "Welcome to this ultimate hamster battle.";

    [Parameter]
    public double Hamster1Procent { get; set; }
    [Parameter]
    public double Hamster2Procent { get; set; }
    [Parameter]
    public EventCallback<List<Hamster>> ResetList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        message = "Getting hamsters";
        await HamsterService.GetHamsters();
        ShuffleHamsters();
    }

    async void ResetBattle()
    {
        oldHamsterList = HamsterList;
        HamsterList = new List<Hamster>();
        await ResetList.InvokeAsync(ShuffleHamsters());
        StateHasChanged();
    }

    void GenerateOldHamsterList()
    {
        oldHamsterList = HamsterList;
    }

    List<Hamster> ShuffleHamsters()
    {
        int n = HamsterService.Hamsters.Count();
        var list = HamsterService.Hamsters;

        // Plockat från Stackoverflow/google --https://blog.codinghorror.com/shuffling/
        while (n > 1)
        {
            int k = (rnd.Next(0, n) % n);
            n--;
            Hamster value = list[k];
            list[k] = list[n];
            list[n] = value;
        }

        HamsterList = list
                        .Where(x => x.Deleted == false)
                        .Take(2)
                        .ToList();

        return HamsterList;
    }

    protected async void WinningHamster(MouseEventArgs mouseEventArgs, int winningId)
    {
        foreach (var hamster in HamsterList)
        {
            if (hamster.Id == winningId)
            {
                hamster.Wins += 1;
                hamster.Games += 1;
                Match.WinnerId = winningId;
                await HamsterService.UpdateHamster(hamster);
            }
            else
            {
                hamster.Defeats += 1;
                hamster.Games += 1;
                Match.LoserId = hamster.Id;
                await HamsterService.UpdateHamster(hamster);
            }
        }
        await MatchService.CreateMatch(Match);
        Match = new Match();
        oldHamsterList = HamsterList;
        StateHasChanged();
    }

    //// Koden nedan används inte, finns kvar för arkivet.
    //async void InsertWinnerLosser(int winningId)
    //{
    //    foreach (var hamster in HamsterList)
    //    {
    //        if (hamster.Id == winningId)
    //        {
    //            hamster.Wins += 1;
    //            hamster.Games += 1;
    //            Match.WinnerId = winningId;
    //            await HamsterService.UpdateHamster(hamster);
    //        }
    //        else
    //        {
    //            hamster.Defeats += 1;
    //            hamster.Games += 1;
    //            Match.LoserId = hamster.Id;
    //            await HamsterService.UpdateHamster(hamster);
    //        }
    //    }

    //    await MatchService.CreateMatch(Match);

    //    Match = new Match();
    //    StateHasChanged();
    //}
}
