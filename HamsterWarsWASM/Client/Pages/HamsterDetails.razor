@page "/hamster/{id:int}"
@page "/matchwinners/{id:int}"
@inject IHamsterService HamsterService
@inject IMatchService MatchService

@if (hamster == null)
{
    <span>@message</span>
}
else
{
    <WrapperContainerBattleComponent>
        <CardGalleryComponent Heading="@hamster.Name" Source="@hamster.ImgName">
            <p>Age: @hamster.Age<br />
            Loves: @hamster.Loves<br />
            Favourite food: @hamster.FavFood<br />
            Games played: @hamster.Games<br />
            Games won: @hamster.Wins<br />
            Totalt defeats: @hamster.Defeats</p>
        </CardGalleryComponent>
    </WrapperContainerBattleComponent>
}

@if (MatchService.Matches == null || MatchService.Matches.Count == 0)
{
    <span>Loading all matches...</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Match Id</th>
                <th>Winner</th>
                <th>Defeated</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var matches in MatchService.Matches)
            {
                <tr>
                    <td>@matches.Id</td>
                    <td>@matches.WinnerId</td>
                    <td>@matches.LoserId</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Hamster? hamster = null;
    private string message = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await MatchService.GetAllHamsterMatches(Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        message = "Getting hamster..";
        var result = await HamsterService.GetHamster(Id);

        if (!result.Success)
        {
            message = result.Message;
        }
        hamster = result.Data;
    }


}
