@page "/hamster/{id:int}"
@page "/matchwinners/{id:int}"
@inject IHamsterService HamsterService
@inject IMatchService MatchService
@inject NavigationManager NavigationManager

@if (hamster == null)
{
    <span>@message</span>
}
else
{
    <WrapperContainerBattleComponent>
        <CardGalleryComponent Heading="@hamster.Name" Source="@hamster.ImgName">
            <p>
                Age: @hamster.Age<br />
                Loves: @hamster.Loves<br />
                Favourite food: @hamster.FavFood<br />
                Games played: @hamster.Games<br />
                Games won: @hamster.Wins<br />
                Totalt defeats: @hamster.Defeats
            </p>
        </CardGalleryComponent>
    </WrapperContainerBattleComponent>
    <button class="btn btn-warning" @onclick="@(() => EditHamster(@hamster.Id))">
        Edit
    </button>
}

@if (MatchService.Matches == null || MatchService.Matches.Count == 0)
{
    <br />

    <span>Loading all matches...</span>
}
else
{
    <ListMatchComponent Matches="@MatchService.Matches" Context="match">
        <TableHeader>
            <th>ID</th>
            <th>Winner</th>
            <th>Loser</th>
        </TableHeader>
        <RowTemplate>
            <td>@match.Id</td>
            <td>@match.WinnerId</td>
            <td>@match.LoserId</td>
        </RowTemplate>
    </ListMatchComponent>
}

@code {
    private Hamster? hamster = null;
    private string message = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await MatchService.GetAllHamsterMatches(Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        message = "Getting hamster..";
        var result = await HamsterService.GetHamster(Id);

        if (!result.Success)
        {
            message = result.Message;
        }
        hamster = result.Data;
    }
    void EditHamster(int hamsterId)
    {
        NavigationManager.NavigateTo($"edit/{hamsterId}");
    }


}
