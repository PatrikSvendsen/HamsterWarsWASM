@page "/gallery"
@using HamsterWarsWASM.Shared.Service
@inject IHamsterService HamsterService
@inject NavigationManager NavigationManager
@implements IDisposable


@if(HamsterService.Hamsters == null || HamsterService.Hamsters.Count == 0)
{
    <span>Loading cute hamsters plz wait......</span>
}
else
{
    <button class="btn btn-primary" @onclick="CreateHamster">
        <i class="oi oi-plus"></i>
        Click here to add a new hamster
    </button>
    
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Age</th>
                <th>Loves</th>
                <th>FavFood</th>
                <th>Wins</th>
                <th>Defeats</th>
                <th>Games </th>
            </tr>
        </thead>
        <tbody>
        @foreach (var hamster in HamsterService.Hamsters)
        {
            if (hamster.Deleted == false)
            {
                <tr>
                    <td>@hamster.Name</td>
                    <td>@hamster.Age</td>
                    <td>@hamster.Loves</td>
                    <td>@hamster.FavFood</td>
                    <td>@hamster.Wins</td>
                    <td>@hamster.Defeats</td>
                    <td>@hamster.Games</td>
                  <button class="btn btn-warning" @onclick="@(() => EditHamster(@hamster.Id))" >
                      Edit
                  </button>
              </tr>
            }
        }
        </tbody>
    </table>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        await HamsterService.GetHamsters();
    }

    void CreateHamster()
    {
        NavigationManager.NavigateTo("/create");
    }

    void EditHamster(int hamsterId)
    {
        NavigationManager.NavigateTo($"edit/{hamsterId}");
    }

    public void Dispose()
    {
        HamsterService.HamstersChanged -= StateHasChanged;
    }
}
