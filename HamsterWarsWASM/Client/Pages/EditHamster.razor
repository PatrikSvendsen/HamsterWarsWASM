@page "/create"
@page "/edit/{id:int}"
@inject IHamsterService HamsterService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@message</span>
}
else
{
    @if (hamster.Editing)
    {
        <h3>Edit "@hamster.Name"</h3>
    }
    else if (hamster.IsNew)
    {
        <h3>Add a new Hamster</h3>
    }

    <EditForm Model="hamster" OnValidSubmit="AddOrEditHamster">
        <DataAnnotationsValidator />
        <div class="mb-0">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="hamster.Name" class="form-control" placeholder="Enter hamster name here"></InputText>
        </div>
        <div class="mb-0">
            <label for="imgName">Img Url</label>
            <InputText id="imgName" @bind-Value="hamster.ImgName" class="form-control" placeholder="Put imgurl here"></InputText>
        </div>
        <div class="mb-0">
            <img class="img-edit" src="@hamster.ImgName" />
        </div>
        <div class="mb-0">
            <label for="age">Age</label>
            <InputSelect id="age" @bind-Value="hamster.Age" class="form-control">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </InputSelect>
        </div>
        <div class="mb-0">
            <label for="favFood">FavFood</label>
            <InputText id="favFood" @bind-Value="hamster.FavFood" class="form-control" placeholder="Favourite hamster food"></InputText>
        </div>
        <div class="mb-0">
            <label for="loves">Loves</label>
            <InputText id="loves" @bind-Value="hamster.Loves" class="form-control" placeholder="What does this hamster love the most?"></InputText>
        </div>
        <div class="col">
        </div>
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary />
    </EditForm>

    @if (!hamster.IsNew)
    {
        <HomeButton type="button" class="btn btn-danger float-start" @onclick="DeleteHamster">
            Delete Hamster
        </HomeButton>
    }
}

@code {

    [Parameter]
    public int Id { get; set; }

    Hamster hamster = new Hamster();
    bool loading = true;
    string btnText = "";
    string message = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await HamsterService.GetHamsters();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            hamster = new Hamster { IsNew = true };
            btnText = "Add Hamster";
        }
        else
        {
            Hamster dbHamster = (await HamsterService.GetHamster(Id)).Data;
            if (dbHamster == null)
            {
                message = $"Hamster with Id '{Id}' does not exist";
                return;
            }
            hamster = dbHamster;
            hamster.Editing = true;
            btnText = "Edit Hamster";
        }
        loading = false;
    }

    async void AddOrEditHamster()
    {
        if (hamster.IsNew)
        {
            var result = await HamsterService.CreateHamster(hamster);
            NavigationManager.NavigateTo($"hamster/{result.Id}");
        }
        else
        {
            hamster.IsNew = false;
            hamster = await HamsterService.UpdateHamster(hamster);
            NavigationManager.NavigateTo($"hamster/{hamster.Id}", true);
        }
    }

    async void DeleteHamster()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>
        ("confirm", $"Do you really want to delete this hamster '{hamster.Id}'?");
        if (confirmed)
        {
            await HamsterService.DeleteHamster(hamster);
            NavigationManager.NavigateTo("/gallery");
        }
    }
}
