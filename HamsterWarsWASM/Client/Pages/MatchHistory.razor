@page "/history"
@inject IMatchService MatchService
@inject NavigationManager NavigationManager

@if (MatchService.Matches == null || MatchService.Matches.Count == 0)
{
    <span>Loading all matches...</span>
}
else
{
    <ListMatchComponent Matches="@MatchList" Context="match">
        <TableHeader>
            <th>ID</th>
            <th>Winner</th>
            <th>Loser</th>
        </TableHeader>
        <RowTemplate>
            <td>@match.Id</td>
            <td>@match.WinnerId</td>
            <td>@match.LoserId</td>
            <td type="button" class="btn btn-danger" @onclick="@(() => EditMatch(@match.Id))">
                Delete Match
            </td>
        </RowTemplate>
    </ListMatchComponent>
}

@code {

    [Parameter]
    public EventCallback<List<Match>> ResetList { get; set; }
    private List<Match> MatchList = new List<Match>();

    protected override async Task OnInitializedAsync()
    {
        await MatchService.GetMatches();
        GenerateMatchList();
    }

    List<Match> GenerateMatchList()
    {
        var list = MatchService.Matches;
        MatchList = list
        .Where(x => x.Deleted == false)
        .ToList();
        return MatchList;
    }

    async void DeleteMatch(Match match)
    {
        await MatchService.DeleteMatch(match);
        ResetBattle();
    }

    async void ResetBattle()
    {
        MatchList = new List<Match>();
        await ResetList.InvokeAsync(GenerateMatchList());
    }

    void EditMatch(int matchId)
    {
        NavigationManager.NavigateTo($"match/{matchId}");
    }

}
